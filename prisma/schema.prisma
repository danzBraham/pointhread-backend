generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums for our various types
enum AuthProvider {
  GOOGLE
  EMAIL
}

enum SummaryType {
  BRIEF
  DETAILED
}

// User model for authentication and profile info
model User {
  id           String       @id @default(cuid()) @db.VarChar(25)
  username     String       @db.VarChar(30)
  email        String       @unique
  password     String?      @db.VarChar(128)
  avatarUrl    String?      @map("avatar_url") @db.VarChar(2048)
  authProvider AuthProvider @map("auth_provider")
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")

  // Relations
  sessions    Session[]
  threads     SummarizedThread[]
  collections Collection[]

  @@map("users")
}

// Session model for storing user sessions
model Session {
  id     String @id @default(cuid()) @db.VarChar(25)
  userId String @map("user_id")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Collection model for organizing threads
model Collection {
  id        String   @id @default(cuid()) @db.VarChar(25)
  name      String   @db.VarChar(50)
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user    User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  threads SummarizedThread[]

  @@map("collections")
}

// SummarizedThread model for storing thread content and summaries
model SummarizedThread {
  id                 String      @id @default(cuid()) @db.VarChar(25)
  originalContent    String      @map("original_content") @db.Text
  summarizedContent  String      @map("summarized_content") @db.Text
  originalThreadLink String      @map("original_thread_link") @db.VarChar(2048)
  summaryType        SummaryType @map("summary_type")
  userId             String      @map("user_id")
  collectionId       String?     @map("collection_id")
  isDeleted          Boolean     @default(false) @map("is_deleted")
  deletedAt          DateTime?   @map("deleted_at")
  createdAt          DateTime    @default(now()) @map("created_at")
  updatedAt          DateTime    @updatedAt @map("updated_at")

  // Relations
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  collection Collection? @relation(fields: [collectionId], references: [id])

  @@map("summarized_threads")
}
